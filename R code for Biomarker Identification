BiocManager::install('GenomicDataCommons')
library(GenomicDataCommons)
library(TCGAbiolinks)
library(genefilter)
library(dplyr) 
library(glmnet)
library(factoextra)
library(FactoMineR)
library(caret)
library(SummarizedExperiment)
library(ggplot2)
library(RColorBrewer)
library(GenomeInfoDbData)
library(keras)
library(tensorflow)

install.packages('BiocManager')
BiocManager::install('methods')
BiocManager::install('ggplot2')
BiocManager::install('rmarkdown')
BiocManager::install('dplyr')
BiocManager::install('knitr')
BiocManager::install('RCurl')
BiocManager::install('VariantAnnotation')
BiocManager::install('BSgenome.Hsapiens.UCSC.hg19')
BiocManager::install('TxDb.Hsapiens.UCSC.hg19.knownGene')
BiocManager::install('SNPlocs.Hsapiens.dbSNP144.GRCh37')
BiocManager::install('GenomicFeatures')
BiocManager::install('maftools')
BiocManager::install('NMF')
BiocManager::install('BiocGenerics')
BiocManager::install('R.utils')
BiocManager::install('pheatmap')
BiocManager::install('stringr')
BiocManager::install('testthat')
BiocManager::install('yaml')

GenomicDataCommons::status()
stopifnot(GenomicDataCommons::status()$status=="OK")

gdcprojects <- getGDCprojects()
getProjectSummary("TCGA-LUAD")

query.mirna <- GDCquery(
  project = "TARGET-AML",
  data.category = "Transcriptome Profiling",
  data.type = "miRNA Expression Quantification",
  experimental.strategy = "miRNA-Seq",
  barcode = c("TARGET-20-PATDNN","TARGET-20-PAPUNR"))


# Configuring Dataset from TCGA 
query_TCGA <- GDCquery(
  project = "TCGA-LUAD",
  data.category = "Transcriptome Profiling",
  data.type = "Gene Expression Quantification",
  experimental.strategy = "RNA-Seq",
  barcode = c("TCGA-*"))

GDCdownload(query = query_TCGA, method = "api", files.per.chunk = 25)

tcga_data <- GDCprepare(query_TCGA,summarizedExperiment = TRUE)

class(tcga_data)

saveRDS(tcga_data,file = "TCGA.rds")
tcga_data <- readRDS("TCGA.rds")

# Data structring and Preparations

sedf <- tcga_data

sedf <- sedf[,sedf@colData@listData$sample_type != "Metastatic"]

sedf <- sedf[,1:400]
sedf
geneslist <- sedf@rowRanges$gene_id
geneslist
samplelist <- sedf@colData@listData$sample
samplelist 
expr <- sedf@assays@data@listData$tpm_unstrand

rownames(expr) <- geneslist

rownames(expr)
colnames(expr) <- sedf@colData@listData$sample

drop <- apply(expr,1,min) > 2000
expr_filtered <- expr[!drop,]

drop2 <- apply(expr_filtered ,1,max) < 100
expr_filtered <- expr_filtered[!drop2,]

dim(expr_filtered)

library(DESeq2)

BiocManager::install('apeglm')
library(apeglm)

rm(expr)
gc()

library(limma)
BiocManager::install('edgeR')
library(edgeR)

dge <- DGEList(t(expr_filtered))
plotMDS.default(dge,cex = 0.4,col=tcga_data@colData@listData$sample_type)

train_data <- unlist(t(expr_filtered))
train_data <- log2(train_data+0.5)
dim(train_data) <- dim(t(expr_filtered))

hist(train_data[1,]) 
hist(train_data[2,])
hist(train_data[3,])

dim(train_data)

library(pheatmap)
pheatmap(train_data)

## Princple Component Analysis
pca.gse <- PCA(train_data,graph = FALSE)

fviz_pca_ind(pca.gse, geom = "point", col.ind = sedf@colData@listData[["prior_malignancy"]])
col.ind = sedf@colData@listData[["releasable"]]


# Preparing Training Label + Converting Catergorical data to One-Hot Encoding 
sedf <- sedf[,sedf@colData@listData$sample_type != "Metastatic"]
table(sedf@colData@listData[["prior_malignancy"]])
train_label <- sedf@colData@listData[["prior_malignancy"]]
train_label <- train_label %>% as.factor() %>% as.numeric()
train_label <- train_label- 1
dim(train_label) <- c(dim(expr_filtered)[2], 1)

train_label <- to_categorical(train_label, num_classes=1)

pheatmap(train_label,cluster_cols = FALSE,cluster_rows = FALSE)


# Construcing Neural Network 
rm(model)
dim(train_data)[2]

NNarray <- c(8000,2048, 1024) 

model <- keras_model_sequential() %>%
  layer_dense(
    units = NNarray[2],
    activation = "relu",
    input_shape = dim(train_data)[2]
  ) %>%
  layer_dense(units = NNarray[2], activation = "relu") %>%
  layer_dense(units = NNarray[3], activation = "relu") %>%
  #layer_dense(units = NNarray[4], activation = "relu") %>%
  layer_dense(units = dim(train_label)[2], activation = "sigmoid")

model %>% compile(optimizer = 'sgd', loss = "binary_crossentropy", metrics = c('accuracy'))

history <- model %>%
  fit(
    x = train_data,
    y = train_label,
    epochs = 200,
    use_multiprocessing = TRUE,
    batch_size = dim(train_data)[1]/25
    #validation_split = 0.1
)

save_model_hdf5(model,'C:/Users/AMAN/Documents/GDCdata/TCGA-LUAD/savemodel1.hdf5')
save_model_hdf5
model <- keras::load_model_hdf5('C:/Users/AMAN/Documents/GDCdata/TCGA-LUAD/savemodel1.hdf5')
model
evaluate(model, train_data, train_label)

# Extraction of Weights and Bias 

weight <- as.matrix(model$layers[[1]]$weights[[1]])
weight
bias   <- as.matrix(model$layers[[1]]$weights[[2]])

expr_filtered <- as.matrix(expr_filtered)

dim(weight)
dim(expr_filtered)

rownames(weight) <- rownames(expr_filtered)

hist(weight[56,])
hist(bias)

pheatmap(weight,cluster_rows = t,cluster_cols = true)

# Isolation of Gene of Interests (GOI)

GOI <- c()

input_data  <- train_data

samplerate <- sample(1:nrow(input_data))[1:100]

for(j in samplerate) {
  #for(j in 1:5) {
  sample1 <- train_data[j, ]
  
  total_weights <- weight * sample1
  total_weights_bias <- colSums(total_weights) + bias
  total_weights_bias <- as.data.frame(total_weights_bias)
  total_weights_bias <- cbind(seq(1, NNarray[2]), total_weights_bias)
  
  top_nodes <- as.data.frame(total_weights_bias[total_weights_bias[,2] > 1, ])
  
  goodnodes <- top_nodes$V1
  genes_to_goodnodes <- as.data.frame(total_weights[, goodnodes])
  
  rm(sample1)
  rm(total_weights)
  rm(total_weights_bias)
  rm(top_nodes)
  
  if(ncol(genes_to_goodnodes)>0){
    for(i in 1:ncol(genes_to_goodnodes)){
      temp <- genes_to_goodnodes[,i]
      names(temp) <- rownames(genes_to_goodnodes)
      temp <- sort(temp,decreasing = TRUE)
      temp <- temp[1:10]
      temp <- names(temp)
      
      GOI <- c(GOI, temp)
      rm(temp)
    }
  }
  
  print(paste("j=",j))
}

GOI_table <- as.data.frame(table(GOI))
GOI_table <- GOI_table %>% arrange(desc(Freq))
GOI_table <- GOI_table[GOI_table$Freq>1,]
GOI_list <- unique(GOI)
write.csv(GOI_table, file = "C:/Users/AMAN/Documents/GDCdata/TCGA-LUAD/GOI_LIST.csv")


# Converting EnsembleID to EntrezID (GOI)

gc()
genelist <- sub("[.][0-9]*", "", GOI_list)

BiocManager::install('iocManager')
library(iocManager)

BiocManager::install("clusterProfiler")
library(clusterProfiler)
BiocManager::install("graphlayouts")
library(graphlayouts)

BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)

new_genelist <- bitr(
  genelist,
  fromType = "ENSEMBL",
  toType = "ENTREZID",
  OrgDb = org.Hs.eg.db,
  drop = TRUE
)
'select()'

nrow(new_genelist)
head(new_genelist)

# Converting EnsembleID to EntrezID (All Genes)

fullgenelist <- rownames(expr_filtered)
fullgenelist <- sub("[.][0-9]*", "", fullgenelist)

new_fullgenelist <- bitr(
  fullgenelist,
  fromType = "ENSEMBL",
  toType = "ENTREZID",
  OrgDb = org.Hs.eg.db,
  drop = TRUE
)

head(new_fullgenelist)
nrow(new_fullgenelist)


# Gene Set Enrichment using enrichGO() from Cluster profiler - Biological Process 

gene <- new_genelist$ENTREZID
fullgene <- new_fullgenelist$ENTREZID

DOSEgenelist <- data(geneList, package = "DOSE")

library(org.Hs.eg.db)
ggo_BP <- groupGO(
  gene     = gene,
  OrgDb    = org.Hs.eg.db,
  ont      = "BP",
  level    = 3,
  readable = TRUE
)

ego_BP <- enrichGO(
  gene       = gene,
  universe      = fullgene,
  OrgDb         = org.Hs.eg.db,
  ont           = "BP",
  pAdjustMethod = "BH",
  pvalueCutoff  = 0.01,
  qvalueCutoff  = 0.05,
  readable      = TRUE
)

head(ego_BP, 10)
goplot(ego_BP)

ego_BP_df <- ego_BP@result
write.csv(ego_BP_df, file= "C:/Users/AMAN/Documents/GDCdata/TCGA-LUAD/ego_BP_df.csv")

# Gene Set Enrichment using enrichGO() from Cluster profiler - Molecular Processes 
ggo_MF <- groupGO(
  gene     = gene,
  OrgDb    = org.Hs.eg.db,
  ont      = "MF",
  level    = 3,
  readable = TRUE
)

ego_MF <- enrichGO(
  gene       = gene,
  universe      = fullgene,
  OrgDb         = org.Hs.eg.db,
  ont           = "MF",
  pAdjustMethod = "BH",
  pvalueCutoff  = 0.01,
  qvalueCutoff  = 0.05,
  readable      = TRUE
)

head(ego_MF, 20)
goplot(ego_MF)

ego_MF_df <- ego_MF@result
write.csv(ego_MF_df, file= "C:/Users/AMAN/Documents/GDCdata/TCGA-LUAD/ego_MF_df.csv")

# Gene Set Enrichment using enrichGO() from Cluster profiler - Cellular Categories  
ggo_MF <- groupGO(
  gene     = gene,
  OrgDb    = org.Hs.eg.db,
  ont      = "CC",
  level    = 3,
  readable = TRUE
)

ego_CC <- enrichGO(
  gene       = gene,
  universe      = fullgene,
  OrgDb         = org.Hs.eg.db,
  ont           = "CC",
  pAdjustMethod = "BH",
  pvalueCutoff  = 0.01,
  qvalueCutoff  = 0.05,
  readable      = TRUE
)

head(ego_CC, 20)
goplot(ego_CC)

ego_cc_df <- ego_CC@result
write.csv(ego_cc_df, file= "C:/Users/AMAN/Documents/GDCdata/TCGA-LUAD/ego_cc_df.csv")

BiocManager::install('rhdf5')
library(rhdf5)
h5read(file = "savemodel1.h5") 
      
